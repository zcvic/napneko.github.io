import{_ as p,c as i,j as e,a as s,G as l,ax as n,B as r,o as c}from"./chunks/framework.BdeBNCXE.js";const d="/assets/recall/1.png",h="/assets/recall/2.png",m="/assets/recall/3.png",u="/assets/recall/4.png",N=JSON.parse('{"title":"防撤回寻找与思考✨","description":"","frontmatter":{},"headers":[],"relativePath":"other/ntrecall.md","filePath":"other/ntrecall.md","lastUpdated":1746423485000}'),b={name:"other/ntrecall.md"};function g(q,a,_,f,x,P){const t=r("NolebasePageProperties"),o=r("NolebaseGitChangelog");return c(),i("div",null,[a[0]||(a[0]=e("h1",{id:"防撤回寻找与思考✨",tabindex:"-1"},[s("防撤回寻找与思考✨ "),e("a",{class:"header-anchor",href:"#防撤回寻找与思考✨","aria-label":'Permalink to "防撤回寻找与思考✨"'},"​")],-1)),l(t),a[1]||(a[1]=n('<h2 id="准备步-本次环境-🔍" tabindex="-1">准备步 本次环境 🔍 <a class="header-anchor" href="#准备步-本次环境-🔍" aria-label="Permalink to &quot;准备步 本次环境 🔍&quot;">​</a></h2><p>工具 x64dbg ida</p><p>版本 NTQQ 34740</p><h2 id="第一步-找找线索🔍" tabindex="-1">第一步 找找线索🔍 <a class="header-anchor" href="#第一步-找找线索🔍" aria-label="Permalink to &quot;第一步 找找线索🔍&quot;">​</a></h2><p>打开IDA Pro把wrapper.node丢进去，先去吃个饭吧，饿死了</p><p>回来后打开string view看看</p><p>根据经验，撤回的英文嘛，要么是recall要么是revoke呢。</p><p>字符串里有&quot;do&quot;之类的不是下发通知，是客户端主动发送撤回请求哦。</p><p>其中相关的包括上面的trpc什么什么的(了解协议的小伙伴应该知道)</p><p><img src="'+d+'" alt="recall"></p><p>&quot;on grp recall&quot;和&quot;on c2c recall&quot;，这个看起来超级可疑的</p><h2 id="第二步-验证思路💭" tabindex="-1">第二步 验证思路💭 <a class="header-anchor" href="#第二步-验证思路💭" aria-label="Permalink to &quot;第二步 验证思路💭&quot;">​</a></h2><p>于是呢，我们找到xref &quot;on grp recall&quot;，跳到目标函数 <img src="'+h+'" alt="recall"></p><p>然后对这部分打个断点，发现撤回的时候果然触发了这部分代码！</p><p><img src="'+m+'" alt="recall"></p><p>所以确定啦，这就是撤回处理部分</p><h2 id="第三步-破坏逻辑🔨" tabindex="-1">第三步 破坏逻辑🔨 <a class="header-anchor" href="#第三步-破坏逻辑🔨" aria-label="Permalink to &quot;第三步 破坏逻辑🔨&quot;">​</a></h2><p>猜测NTQQ撤回逻辑很简单嘛，肯定包括删除数据库、中断图片文件请求、回收一切相关的东西呀。</p><p>为了阻止这些事情发生，我们要让recall逻辑走错路线，比如让它判断不出这是recall，或者给它填充错误的内存数据。</p><p><img src="'+u+'" alt="recall"> 我选了两处地方，第一处把jnbe改成jbe(我实验的这个)，第二处也是同理，任意反转一处逻辑应该就行了。</p><p>直接右键汇编 让逻辑反过来，同时保持字节数一致，这样就完成反撤回消息 此时可进行测试</p><h2 id="思考之后🤔" tabindex="-1">思考之后🤔 <a class="header-anchor" href="#思考之后🤔" aria-label="Permalink to &quot;思考之后🤔&quot;">​</a></h2><p>但是有个问题，如果这样破坏了recall逻辑，我怎么知道谁撤回了消息呀？我也想区分哪条撤回了</p><p>这里有两个方案可以选择呢：</p><ol><li><p>手动解协议方案💟</p><p>根据经验，撤回的sysmsg可以通过ipc拿到协议包，或者像napcat一样注册listener直接获取sysmsg协议包。</p><p>解完协议后，可以调用QQ自己的api去获取撤回消息（因为我们阻止了删除数据库）。</p><p>如果想要通知，可以调用msgService的addLocalGrayTip添加小灰条提示</p><p>当然也可以对前端随便加，爱怎么改就怎么改</p></li><li><p>node native模块方案💕</p><p>可以写成node native模块，提取撤回的结构体数据。</p><p>启动时注册一个js callback，撤回时native调用callback就能拿到相关结构</p><p>然后就和上面一样了</p></li><li><p>动态模块/patch方案💝 写成这个后拦截这部分，需要从外部获取msgService（通过napi操作和Hook操作）。</p><p>获取到msgService后直接调用它的addLocalGrayTip，就可以添加小灰条通知</p></li></ol><h2 id="优势总结✅" tabindex="-1">优势总结✅ <a class="header-anchor" href="#优势总结✅" aria-label="Permalink to &quot;优势总结✅&quot;">​</a></h2><ol><li>无需缓存消息，所有数据均保存在 NTQQ 数据库中</li><li>图片资源下载不受影响，可随时获取</li><li>实现更加优雅</li></ol><h2 id="潜在问题⚠️" tabindex="-1">潜在问题⚠️ <a class="header-anchor" href="#潜在问题⚠️" aria-label="Permalink to &quot;潜在问题⚠️&quot;">​</a></h2><ol><li>跨平台兼容性较差，需针对不同系统分别适配</li><li>直接修改程序执行流程可能导致稳定性问题</li><li>版本更新后需重新分析适配</li></ol><h2 id="总结文章🤔" tabindex="-1">总结文章🤔 <a class="header-anchor" href="#总结文章🤔" aria-label="Permalink to &quot;总结文章🤔&quot;">​</a></h2><p>但是相比于现在LL社区方案是更有效率的 不会打断文件/图片下载</p><p>同时没有消息缓存的概念 多久的消息都不影响</p>',32)),l(o)])}const v=p(b,[["render",g]]);export{N as __pageData,v as default};
