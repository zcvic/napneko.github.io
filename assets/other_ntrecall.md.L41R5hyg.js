import{_ as s,c,j as a,a as n,G as t,ax as i,B as r,o as p}from"./chunks/framework.BdeBNCXE.js";const d="/assets/recall/1.png",h="/assets/recall/2.png",m="/assets/recall/3.png",g="/assets/recall/4.png",x=JSON.parse('{"title":"防撤回寻找与思考✨","description":"","frontmatter":{},"headers":[],"relativePath":"other/ntrecall.md","filePath":"other/ntrecall.md","lastUpdated":1746421327000}'),u={name:"other/ntrecall.md"};function _(b,e,q,f,P,k){const l=r("NolebasePageProperties"),o=r("NolebaseGitChangelog");return p(),c("div",null,[e[0]||(e[0]=a("h1",{id:"防撤回寻找与思考✨",tabindex:"-1"},[n("防撤回寻找与思考✨ "),a("a",{class:"header-anchor",href:"#防撤回寻找与思考✨","aria-label":'Permalink to "防撤回寻找与思考✨"'},"​")],-1)),t(l),e[1]||(e[1]=i('<h2 id="第一步-找找线索🔍" tabindex="-1">第一步 找找线索🔍 <a class="header-anchor" href="#第一步-找找线索🔍" aria-label="Permalink to &quot;第一步 找找线索🔍&quot;">​</a></h2><p>打开IDA Pro把wrapper.node丢进去，先去吃个饭吧，饿死了 回来后打开string view看看 根据经验，撤回的英文嘛，要么是recall要么是revoke呢。 字符串里有&quot;do&quot;之类的不是下发通知，是客户端主动发送撤回请求哦。 其中相关的包括上面的trpc什么什么的(了解协议的小伙伴应该知道) <img src="'+d+'" alt="recall"> &quot;on grp recall&quot;和&quot;on c2c recall&quot;，这个看起来超级可疑的</p><h2 id="第二步-验证思路💭" tabindex="-1">第二步 验证思路💭 <a class="header-anchor" href="#第二步-验证思路💭" aria-label="Permalink to &quot;第二步 验证思路💭&quot;">​</a></h2><p>于是呢，我们找到xref &quot;on grp recall&quot;，跳到目标函数 <img src="'+h+'" alt="recall"></p><p>然后对这部分打个断点，发现撤回的时候果然触发了这部分代码！</p><p><img src="'+m+'" alt="recall"></p><p>所以确定啦，这就是撤回处理部分</p><h2 id="第三步-破坏逻辑🔨" tabindex="-1">第三步 破坏逻辑🔨 <a class="header-anchor" href="#第三步-破坏逻辑🔨" aria-label="Permalink to &quot;第三步 破坏逻辑🔨&quot;">​</a></h2><p>撤回逻辑很简单嘛，肯定包括删除数据库、中断图片文件请求、回收一切相关的东西呀。 为了阻止这些发生，我们要让recall逻辑走错路线，比如让它判断不出这是recall，或者给它错误的内存数据 <img src="'+g+'" alt="recall"> 我选了两处地方，第一处把jnbe改成jbe(我实验的这个)，第二处也是同理</p><p>让逻辑反过来，同时保持字节数一致，这样就完成反撤回消息</p><h2 id="思考之后🤔" tabindex="-1">思考之后🤔 <a class="header-anchor" href="#思考之后🤔" aria-label="Permalink to &quot;思考之后🤔&quot;">​</a></h2><p>但是有个问题，如果这样破坏了recall逻辑，我怎么知道谁撤回了消息呀？我也想区分哪条撤回了</p><p>这里有两个方案可以选择呢：</p><ol><li><p>手动解协议方案💟 根据经验，撤回的sysmsg可以通过ipc拿到协议包，或者像napcat一样注册listener直接获取sysmsg协议包。 解完协议后，可以调用QQ自己的api去获取撤回消息（因为我们阻止了删除数据库）。 如果想要通知，可以调用msgService的addLocalGrayTip添加小灰条提示 当然也可以对前端随便加，爱怎么改就怎么改</p></li><li><p>node native模块方案💕 可以写成node native模块，提取撤回的结构体数据。 启动时注册一个js callback，撤回时native调用callback就能拿到相关结构 然后就和上面一样了</p></li><li><p>动态模块/patch方案💝 写成这个后拦截这部分，需要从外部获取msgService（通过napi操作和Hook操作）。 获取到msgService后直接调用它的addLocalGrayTip，就可以添加小灰条通知</p></li></ol>',14)),t(o)])}const N=s(u,[["render",_]]);export{x as __pageData,N as default};
